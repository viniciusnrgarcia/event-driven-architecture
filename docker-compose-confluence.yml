version: '3'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.1
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-server:6.2.1
    hostname: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  control-center:
    image: confluentinc/cp-enterprise-control-center:6.2.1
    hostname: control-center
    depends_on:
      - broker
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
#    hostname: elasticsearch
#    ports:
#      - "9200:9200"
#      - "9300:9300"
#    environment:
#      discovery.type: "single-node"
#      ES_JAVA_OPTS: "-Xms1g -Xmx2g"

#  kibana:
#    image: docker.elastic.co/kibana/kibana:7.7.0
#    ports:
#      - "5601:5601"
#    environment:
#      ELASTICSEARCH_URL: http://elasticsearch:9200
#    depends_on:
#      - elasticsearch

#  redis:
#    image: redis
#    hostname: redis
#    command: redis-server #--requirepass R38s12sX_23
#    ports:
#      - "6379:6379"

#  mongo:
#    image: mongo:latest
#    hostname: mongo
#    ports:
#      - "27017:27017"
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: admin
#      MONGO_INITDB_ROOT_PASSWORD: 123456


  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    #    depends_on:
    #      - api01
    #      - api02
    ports:
      # Obrigatório expor/usar a porta 9999 no load balancer!
      - "9999:9999"
  #    deploy:
  #      resources:
  #        limits:
  #          cpus: "0.10"
  #          memory: "40MB"


  db:
    image: postgres:latest
    hostname: db
    environment:
      - POSTGRES_PASSWORD=123
      - POSTGRES_USER=admin
      - POSTGRES_DB=paymentdb
    ports:
      - "5432:5432"
    volumes:
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    #  - ./database.conf:/etc/database.conf
    # command: postgres -c config_file="/etc/database.conf"
    # command: postgres -c 'max_connections=100' -c 'shared_buffers=200MB' -c 'fsync=off' -c 'effective_cache_size=512MB' -c 'synchronous_commit=off' -c 'checkpoint_timeout=1d' -c 'max_wal_size=1GB' -c 'full_page_writes=false'
    command: postgres -c checkpoint_timeout=600 -c max_wal_size=4096 -c synchronous_commit=0 -c fsync=0 -c full_page_writes=0
    #    deploy:
    #      resources:
    #        limits:
    #          # Note que a soma de todos os limites dos serviços
    #          # aqui declarados é de 1.5 unidades de CPU e 550MB
    #          # de memória. A distribuição feita aqui é apenas
    #          # um exemplo – distribua como quiser.
    #          cpus: "1.00"
    #          memory: "240MB"
    #    networks:
    #      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d paymentdb" ]
      # test: [ "CMD", "pg_isready", "--username", "admin" ]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s


volumes:
  kafka-volume:
  zookeeper-volume:

# networks:
#   default:
#     driver: bridge
#     name: rinha-nginx-2024q1