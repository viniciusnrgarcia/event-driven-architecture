# docker-compose.yml
# version: "3.9" obsoleto

services:
  zookeeper:
    hostname: zookeeper
    restart: always
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
#    volumes:
#      - "zookeeper-volume:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    restart: always
    hostname: kafka
    image: docker.io/bitnami/kafka:3.3
    ports:
      - "29092:29092"
#    volumes:
#      - "kafka-volume:/bitnami"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:29092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
#  zookeeper:
#    image: confluentinc/cp-zookeeper:latest
#    hostname: zookeeper
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#    ports:
#      - "2181:2181"
#
#  kafka:
#    image: confluentinc/cp-kafka:latest
#    hostname: kafka
#    depends_on:
#      - zookeeper
#    ports:
#      - "9092:9092"
#      - "29092:29092"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_INTERNAL://kafka:9092
#      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
#      KAFKA_INTER__BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      # KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      # KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    depends_on:
      - kafka
      - zookeeper
    ports:
      - 9000:9000
    environment:
      KAFKA_BROKERCONNECT: 'kafka:9092'
      JVM_OPTS: '-Xms16m -Xmx32m -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005'

  kafka-ui:
    hostname: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 9001:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      # KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      #KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schemaregistry0:8085
      #KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: first
      #KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect0:8083
      #KAFKA_CLUSTERS_1_NAME: secondLocal
      #KAFKA_CLUSTERS_1_BOOTSTRAPSERVERS: kafka:29092
      #KAFKA_CLUSTERS_1_METRICS_PORT: 9998
      #KAFKA_CLUSTERS_1_SCHEMAREGISTRY: http://schemaregistry1:8085
      DYNAMIC_CONFIG_ENABLED: 'true'
    depends_on:
      - zookeeper
      - kafka


  nginx:
    image: nginx:latest
    hostname: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
#    depends_on:
#      - api01
#      - api02
    ports:
      # Obrigatório expor/usar a porta 9999 no load balancer!
      - "9999:9999"
  #    deploy:
  #      resources:
  #        limits:
  #          cpus: "0.10"
  #          memory: "40MB"


  db:
    image: postgres:latest
    hostname: db
    environment:
      - POSTGRES_PASSWORD=123
      - POSTGRES_USER=admin
      - POSTGRES_DB=paymentdb
    ports:
      - "5432:5432"
    volumes:
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    #  - ./database.conf:/etc/database.conf
    # command: postgres -c config_file="/etc/database.conf"
    # command: postgres -c 'max_connections=100' -c 'shared_buffers=200MB' -c 'fsync=off' -c 'effective_cache_size=512MB' -c 'synchronous_commit=off' -c 'checkpoint_timeout=1d' -c 'max_wal_size=1GB' -c 'full_page_writes=false'
    command: postgres -c checkpoint_timeout=600 -c max_wal_size=4096 -c synchronous_commit=0 -c fsync=0 -c full_page_writes=0
    #    deploy:
    #      resources:
    #        limits:
    #          # Note que a soma de todos os limites dos serviços
    #          # aqui declarados é de 1.5 unidades de CPU e 550MB
    #          # de memória. A distribuição feita aqui é apenas
    #          # um exemplo – distribua como quiser.
    #          cpus: "1.00"
    #          memory: "240MB"
    #    networks:
    #      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d paymentdb" ]
      # test: [ "CMD", "pg_isready", "--username", "admin" ]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s


  keycloak:
    image: quay.io/keycloak/keycloak:18.0.0
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8081:8080"
    command:
      - start-dev

